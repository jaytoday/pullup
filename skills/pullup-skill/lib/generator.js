/**
 * Skill Generation Engine
 *
 * Generates application-specific testing skill files from analysis data.
 * Creates SKILL.md, app-knowledge.json, test-patterns.js, and README.md.
 */

const fs = require('fs');
const path = require('path');

class SkillGenerator {
  constructor(analysisData, config) {
    this.analysis = analysisData;
    this.config = config;
    this.appName = analysisData.appName;
    this.skillName = `${this.appName}-testing`;
    this.outputPath = null;
  }

  /**
   * Generate complete skill package
   */
  async generate() {
    console.log(`✨ Generating skill: ${this.skillName}`);

    // Create skill directory
    this.outputPath = path.join(
      this.config.outputDirectory,
      this.skillName
    );

    if (!fs.existsSync(this.outputPath)) {
      fs.mkdirSync(this.outputPath, { recursive: true });
    }

    // Generate all skill files
    await this.generateSkillMd();
    await this.generateAppKnowledge();
    await this.generateTestPatterns();
    await this.generateReadme();

    console.log(`   📄 SKILL.md generated`);
    console.log(`   📊 app-knowledge.json generated`);
    console.log(`   🧪 test-patterns.js generated`);
    console.log(`   📖 README.md generated`);

    return this.outputPath;
  }

  /**
   * Generate SKILL.md file
   */
  async generateSkillMd() {
    const content = `---
name: ${this.appName} Testing
description: Application-specific testing skill for ${this.appName}. Contains pre-mapped pages, forms, and test patterns. Extends the base Playwright skill with application knowledge.
version: 1.0.0
extends: playwright-skill
type: application-specific
---

# ${this.appName} Testing Skill

Generated testing skill for ${this.appName} application.

## Application Context

- **Base URL**: ${this.analysis.baseUrl}
- **Pages Mapped**: ${Object.values(this.analysis.pages).flat().length}
- **Forms Discovered**: ${this.analysis.forms.length}
- **User Flows**: ${this.analysis.userFlows.length}
${this.analysis.framework.framework !== 'unknown' ? `- **Framework**: ${this.analysis.framework.framework}` : ''}

## Quick Start

This skill provides ready-to-use test patterns for ${this.appName}. It references the base Playwright skill for execution.

### Running Tests

Use this skill with natural language:

\`\`\`
"Use ${this.appName}-testing to verify the homepage loads"
"Test the login flow using ${this.skillName}"
"Check if forms work in ${this.appName}"
\`\`\`

## Key Pages

${this.generatePagesSection()}

## Forms

${this.generateFormsSection()}

## User Flows

${this.generateFlowsSection()}

## Test Scenarios

${this.generateScenariosSection()}

## Test Patterns

This skill includes pre-configured test patterns in \`test-patterns.js\`:

${this.generatePatternsList()}

## Application Knowledge

Detailed application structure is stored in \`app-knowledge.json\`.
This includes:
- Complete page inventory with URLs
- Form field mappings and selectors
- Interactive element catalog
- Navigation hierarchy
- Discovered user flows

## Usage with Playwright Skill

This skill is designed to work with the Playwright skill. It provides:
- Application context (URLs, credentials, structure)
- Pre-mapped selectors and elements
- Common test scenarios

The Playwright skill handles:
- Browser automation
- Test execution
- Screenshot capture
- Error handling

### Example

\`\`\`
User: "Test login for ${this.appName}"

Claude uses ${this.skillName} skill to get:
- Login page URL: ${this.getLoginUrl()}
- Form selectors
- Expected redirect
- Test credentials (if configured)

Then references playwright-skill to execute the test.
\`\`\`

## Updating This Skill

As your application evolves, update this skill:

\`\`\`bash
# Re-run PullUp skill to update
node pullup/execute.js --name ${this.appName} --update
\`\`\`

This will:
- Re-explore the application
- Discover new pages and features
- Merge with existing knowledge
- Preserve your customizations

## Customization

You can edit these files to customize the skill:
- \`app-knowledge.json\`: Add/modify application structure
- \`test-patterns.js\`: Add custom test helpers
- \`SKILL.md\`: Update documentation

## Notes

- Generated by PullUp skill generator
- Version: 1.0.0
- Last updated: ${new Date().toISOString().split('T')[0]}
- Pages explored: ${this.analysis.statistics.pagesExplored}
${this.config.userPrompt ? `- Generation context: ${this.config.userPrompt}` : ''}
`;

    fs.writeFileSync(
      path.join(this.outputPath, 'SKILL.md'),
      content,
      'utf8'
    );
  }

  /**
   * Generate app-knowledge.json file
   */
  async generateAppKnowledge() {
    const knowledge = {
      appName: this.appName,
      baseUrl: this.analysis.baseUrl,
      version: '1.0.0',
      generatedAt: new Date().toISOString(),
      pages: this.analysis.pages,
      forms: this.analysis.forms,
      navigation: this.analysis.navigation,
      userFlows: this.analysis.userFlows,
      testScenarios: this.analysis.testScenarios,
      framework: this.analysis.framework,
      statistics: this.analysis.statistics,
      generationContext: this.config.userPrompt || null
    };

    fs.writeFileSync(
      path.join(this.outputPath, 'app-knowledge.json'),
      JSON.stringify(knowledge, null, 2),
      'utf8'
    );
  }

  /**
   * Generate test-patterns.js file
   */
  async generateTestPatterns() {
    const content = `/**
 * Test Patterns for ${this.appName}
 *
 * Pre-configured test helpers and utilities specific to ${this.appName}.
 * Use these with the Playwright skill for consistent testing.
 */

const appKnowledge = require('./app-knowledge.json');

/**
 * Navigate to a specific page by name
 */
async function navigateToPage(page, pageName) {
  const pageInfo = findPageByName(pageName);
  if (!pageInfo) {
    throw new Error(\`Page not found: \${pageName}\`);
  }
  await page.goto(pageInfo.url);
  console.log(\`📄 Navigated to: \${pageName}\`);
}

/**
 * Find page information by name
 */
function findPageByName(pageName) {
  for (const category of Object.values(appKnowledge.pages)) {
    const found = category.find(p =>
      p.name.toLowerCase() === pageName.toLowerCase()
    );
    if (found) return found;
  }
  return null;
}

/**
 * Get form by pattern (login, signup, etc.)
 */
function getFormByPattern(pattern) {
  return appKnowledge.forms.find(f => f.pattern === pattern);
}

/**
 * Fill form with test data
 */
async function fillFormWithTestData(page, formPattern) {
  const formInfo = getFormByPattern(formPattern);
  if (!formInfo) {
    throw new Error(\`Form pattern not found: \${formPattern}\`);
  }

  console.log(\`📝 Filling \${formPattern} form...\`);

  for (const [fieldName, value] of Object.entries(formInfo.testData)) {
    if (value === '[TEST_PASSWORD]') {
      console.log(\`   ⚠️  Skipping password field (use actual credential)\`);
      continue;
    }

    const selector = \`input[name="\${fieldName}"], textarea[name="\${fieldName}"], select[name="\${fieldName}"]\`;
    try {
      await page.fill(selector, value);
      console.log(\`   ✓ Filled \${fieldName}\`);
    } catch (err) {
      console.log(\`   ⚠️  Could not fill \${fieldName}: \${err.message}\`);
    }
  }
}

/**
 * Execute a user flow by name
 */
async function executeFlow(page, flowName) {
  const flow = appKnowledge.userFlows.find(f =>
    f.name.toLowerCase() === flowName.toLowerCase()
  );

  if (!flow) {
    throw new Error(\`Flow not found: \${flowName}\`);
  }

  console.log(\`🔗 Executing flow: \${flowName}\`);

  for (const step of flow.steps) {
    console.log(\`   → \${step.action}\`);
    if (step.url) {
      await page.goto(step.url);
    }
    if (step.selector) {
      // This is a simplified example - actual implementation would be more robust
      await page.waitForSelector(step.selector, { timeout: 5000 });
    }
  }

  console.log(\`   ✅ Flow completed\`);
}

/**
 * Get all pages of a specific type
 */
function getPagesByType(pageType) {
  const results = [];
  for (const category of Object.values(appKnowledge.pages)) {
    const found = category.filter(p => p.type === pageType);
    results.push(...found);
  }
  return results;
}

/**
 * Get application base URL
 */
function getBaseUrl() {
  return appKnowledge.baseUrl;
}

/**
 * Get test scenario by name
 */
function getTestScenario(scenarioName) {
  return appKnowledge.testScenarios.find(s =>
    s.name.toLowerCase().includes(scenarioName.toLowerCase())
  );
}

module.exports = {
  navigateToPage,
  findPageByName,
  getFormByPattern,
  fillFormWithTestData,
  executeFlow,
  getPagesByType,
  getBaseUrl,
  getTestScenario
};
`;

    fs.writeFileSync(
      path.join(this.outputPath, 'test-patterns.js'),
      content,
      'utf8'
    );
  }

  /**
   * Generate README.md file
   */
  async generateReadme() {
    const content = `# ${this.appName} Testing Skill

Application-specific testing skill for ${this.appName}, generated by PullUp.

## Overview

This skill provides ready-to-use test patterns, page mappings, and flow definitions for ${this.appName}.
It works with the base Playwright skill to enable quick, context-aware testing.

## What's Included

- **SKILL.md**: Skill definition and documentation
- **app-knowledge.json**: Complete application structure map
- **test-patterns.js**: Reusable test helper functions
- **README.md**: This file

## Quick Usage

### Test the Homepage

\`\`\`
"Use ${this.skillName} to verify the homepage loads"
\`\`\`

### Test a Specific Feature

\`\`\`
"Test the login flow using ${this.skillName}"
"Check if forms work in ${this.appName}"
"Verify navigation in ${this.appName}"
\`\`\`

### Test Scenarios

This skill includes ${this.analysis.testScenarios.length} pre-defined test scenarios:

${this.analysis.testScenarios.map((s, i) => `${i + 1}. ${s.name}: ${s.description}`).join('\n')}

## Application Structure

### Pages (${Object.values(this.analysis.pages).flat().length} total)

${this.generateReadmePagesSection()}

### Forms (${this.analysis.forms.length} total)

${this.analysis.forms.map((f, i) => `${i + 1}. ${f.pattern} form - ${f.fieldCount} fields`).join('\n')}

### User Flows (${this.analysis.userFlows.length} identified)

${this.analysis.userFlows.map((f, i) => `${i + 1}. ${f.name}`).join('\n')}

## Using Test Patterns

The \`test-patterns.js\` file provides helper functions:

\`\`\`javascript
const patterns = require('./test-patterns.js');

// Navigate to a specific page
await patterns.navigateToPage(page, 'Homepage');

// Fill a form with test data
await patterns.fillFormWithTestData(page, 'login');

// Execute a user flow
await patterns.executeFlow(page, 'Login Flow');

// Get pages by type
const authPages = patterns.getPagesByType('login');
\`\`\`

## Updating This Skill

As ${this.appName} evolves, update this skill to stay current:

\`\`\`bash
# Re-run PullUp to update
node pullup/execute.js --name ${this.appName} --update
\`\`\`

## Customization

Feel free to modify:

1. **app-knowledge.json**: Add custom page definitions or selectors
2. **test-patterns.js**: Add your own helper functions
3. **SKILL.md**: Update documentation

## Application Info

- **Base URL**: ${this.analysis.baseUrl}
- **Pages Discovered**: ${this.analysis.statistics.pagesExplored}
- **Exploration Time**: ${this.analysis.statistics.duration}s
${this.analysis.framework.framework !== 'unknown' ? `- **Framework**: ${this.analysis.framework.framework}` : ''}

## Support

This skill was generated by PullUp. For issues or questions:
1. Check the PullUp documentation
2. Review app-knowledge.json for accuracy
3. Re-generate the skill if application has changed significantly

---

Generated: ${new Date().toISOString().split('T')[0]}
`;

    fs.writeFileSync(
      path.join(this.outputPath, 'README.md'),
      content,
      'utf8'
    );
  }

  /**
   * Generate pages section for SKILL.md
   */
  generatePagesSection() {
    let output = '';

    for (const [category, pages] of Object.entries(this.analysis.pages)) {
      if (pages.length === 0) continue;

      output += `\n### ${this.capitalize(category)} Pages\n\n`;
      pages.slice(0, 5).forEach(page => {
        output += `- **${page.name}**: \`${page.path}\`\n`;
        if (page.description) {
          output += `  ${page.description}\n`;
        }
      });

      if (pages.length > 5) {
        output += `\n...and ${pages.length - 5} more\n`;
      }
    }

    return output || 'No pages discovered.\n';
  }

  /**
   * Generate forms section for SKILL.md
   */
  generateFormsSection() {
    if (this.analysis.forms.length === 0) {
      return 'No forms discovered.\n';
    }

    let output = '';
    this.analysis.forms.slice(0, 5).forEach((form, i) => {
      output += `\n${i + 1}. **${this.capitalize(form.pattern)} Form**\n`;
      output += `   - Fields: ${form.fieldCount}\n`;
      output += `   - Method: ${form.method.toUpperCase()}\n`;
      if (form.fields.length > 0) {
        output += `   - Key fields: ${form.fields.slice(0, 3).map(f => f.name || f.id).filter(Boolean).join(', ')}\n`;
      }
    });

    if (this.analysis.forms.length > 5) {
      output += `\n...and ${this.analysis.forms.length - 5} more forms\n`;
    }

    return output;
  }

  /**
   * Generate flows section for SKILL.md
   */
  generateFlowsSection() {
    if (this.analysis.userFlows.length === 0) {
      return 'No user flows identified.\n';
    }

    let output = '';
    this.analysis.userFlows.forEach((flow, i) => {
      output += `\n${i + 1}. **${flow.name}**\n`;
      flow.steps.forEach((step, j) => {
        output += `   ${j + 1}. ${step.action}\n`;
      });
    });

    return output;
  }

  /**
   * Generate scenarios section for SKILL.md
   */
  generateScenariosSection() {
    if (this.analysis.testScenarios.length === 0) {
      return 'No test scenarios generated.\n';
    }

    let output = '';
    this.analysis.testScenarios.slice(0, 5).forEach((scenario, i) => {
      output += `\n${i + 1}. **${scenario.name}**\n`;
      output += `   ${scenario.description}\n`;
    });

    if (this.analysis.testScenarios.length > 5) {
      output += `\n...and ${this.analysis.testScenarios.length - 5} more scenarios\n`;
    }

    return output;
  }

  /**
   * Generate patterns list for SKILL.md
   */
  generatePatternsList() {
    return `- \`navigateToPage(page, pageName)\`: Navigate to a known page
- \`fillFormWithTestData(page, formPattern)\`: Auto-fill forms
- \`executeFlow(page, flowName)\`: Run a user flow
- \`getPagesByType(type)\`: Get pages by category
- And more helper functions...
`;
  }

  /**
   * Generate pages section for README.md
   */
  generateReadmePagesSection() {
    let output = '';

    for (const [category, pages] of Object.entries(this.analysis.pages)) {
      if (pages.length > 0) {
        output += `- **${this.capitalize(category)}**: ${pages.length} pages\n`;
      }
    }

    return output || 'No pages discovered.\n';
  }

  /**
   * Get login page URL helper
   */
  getLoginUrl() {
    const loginPage = this.analysis.pages.authentication?.find(p => p.type === 'login');
    return loginPage ? loginPage.path : '/login';
  }

  /**
   * Capitalize first letter
   */
  capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
}

module.exports = SkillGenerator;
